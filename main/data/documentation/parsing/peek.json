{"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"It lets the upstream parser “peek” into the input without consuming it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a"},{"type":"text","text":" "},{"type":"text","text":"letter or underscore, but not a digit, but subsequent characters can be digits. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"type":"text","text":", "},{"type":"codeVoice","code":"foo123"},{"type":"text","text":" "},{"type":"text","text":"is a valid identifier, but "},{"type":"codeVoice","code":"123foo"},{"type":"text","text":" is not. We can create an identifier parser by using "},{"type":"codeVoice","code":"Peek"},{"type":"text","text":" "},{"type":"text","text":"to first check if the input starts with a letter or underscore, and if it does, return the"},{"type":"text","text":" "},{"type":"text","text":"remainder of the input up to the first character that is not a letter, a digit, or an"},{"type":"text","text":" "},{"type":"text","text":"underscore."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let identifier = Parse {","  Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}","","try identifier.parse(\"foo123\") \/\/ ✅ \"foo123\"","try identifier.parse(\"_foo123\") \/\/ ✅ \"_foo123\"","try identifier.parse(\"1_foo123\") \/\/ ❌","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | 1_foo123","\/\/   | ^ expected 1 element satisfying predicate"]}],"kind":"content"}],"metadata":{"role":"symbol","symbolKind":"struct","roleHeading":"Structure","title":"Peek","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing4PeekV","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/peek"]}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek","interfaceLanguage":"swift"},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"kind":"relationships"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/upstream"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/parse(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/print(_:into:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/print(_:into:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"((), ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/parsing\/peek\/print(_:into:)","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/print(_:into:)","kind":"symbol","title":"print(_:into:)","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/Parser-Implementations":{"abstract":[],"title":"Parser Implementations","type":"topic","url":"\/documentation\/parsing\/peek\/parser-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","role":"collectionGroup","kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/parse(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/parse(_:)","title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/peek\/parse(_:)","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parserprinter","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/ParserPrinter-Implementations":{"abstract":[],"url":"\/documentation\/parsing\/peek\/parserprinter-implementations","type":"topic","role":"collectionGroup","title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations","kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","abstract":[],"url":"\/documentation\/parsing","type":"topic","kind":"symbol","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/upstream":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/upstream","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"upstream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","abstract":[],"url":"\/documentation\/parsing\/peek\/upstream","title":"upstream"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/init(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Construct a parser that runs the given parser, but does not consume any input."}],"url":"\/documentation\/parsing\/peek\/init(_:)","title":"init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek":{"abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"title":"Peek","type":"topic","url":"\/documentation\/parsing\/peek","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Peek"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}]}}}