{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-1vm8z","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-77axf","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-l9xc","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-6bmup","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-6dgjs","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-7xl97"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/ParserPrinter-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/digits"]}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Digits"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Length"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"InputToBytes"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing13CountingRangeP","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/CountingRange","kind":"typeIdentifier","text":"CountingRange"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing10ConversionP","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion","kind":"typeIdentifier","text":"Conversion"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:s4UTF8a","kind":"typeIdentifier","text":"UTF8"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","kind":"typeIdentifier","text":"CodeUnit"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Useful for processing simple numbers into integers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try Digits().parse(\"123\")  \/\/ 123"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Digits"},{"type":"text","text":" can be configured with a length of input to parse, making it a more surgical tool than"},{"type":"text","text":" "},{"type":"text","text":"doc:Int"},{"type":"text","text":" parsers, which will parse an entire number all at once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you may want to parse a "},{"code":"YYYYMMDD","type":"codeVoice"},{"type":"text","text":" date format. You could do so using "},{"code":"Digits","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Date { var year, month, day: Int }","","Parse(Date.init(year:month:day:)) {","  Digits(4)","  Digits(2)","  Digits(2)","}",".parse(\"20220131\")  \/\/ Date(year: 2022, month: 1, day: 31)"]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Digits","navigatorTitle":[{"text":"Digits","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Parsing"}],"symbolKind":"struct","externalID":"s:7Parsing6DigitsV"},"kind":"symbol","abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init(_:)-6bmup":{"url":"\/documentation\/parsing\/digits\/init(_:)-6bmup","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-6bmup","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CountingRange","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Conversion","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":")"}],"abstract":[],"type":"topic","title":"init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/parse(_:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/parse(_:)","type":"topic","title":"parse(_:)","kind":"symbol","role":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"url":"\/documentation\/parsing\/digits\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/CountingRange":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/CountingRange","title":"CountingRange","role":"symbol","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"abstract":[],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/countingrange"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init()-1vm8z":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-1vm8z","role":"symbol","kind":"symbol","abstract":[],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":" and ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Conversions.SubstringToUTF8View","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","url":"\/documentation\/parsing\/digits\/init()-1vm8z","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","kind":"article","abstract":[],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/ParserPrinter-Implementations","type":"topic","url":"\/documentation\/parsing\/digits\/parserprinter-implementations","role":"collectionGroup"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/Parser-Implementations":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/Parser-Implementations","role":"collectionGroup","title":"Parser Implementations","kind":"article","url":"\/documentation\/parsing\/digits\/parser-implementations","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"title":"ParserPrinter","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init(_:)-6dgjs":{"role":"symbol","abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-6dgjs","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"text":")","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"code":"Conversions.Identity<Substring.UTF8View>","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/parsing\/digits\/init(_:)-6dgjs","title":"init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init(_:)-7xl97":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":")"}],"title":"init(_:)","kind":"symbol","role":"symbol","abstract":[],"type":"topic","url":"\/documentation\/parsing\/digits\/init(_:)-7xl97","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.SubstringToUTF8View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init(_:)-7xl97"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","abstract":[],"url":"\/documentation\/parsing","type":"topic","kind":"symbol","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversion":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"title":"Conversion","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/conversion","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init()-77axf":{"url":"\/documentation\/parsing\/digits\/init()-77axf","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-77axf","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CountingRange","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Conversions.Identity<Substring.UTF8View>","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"init()","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits","navigatorTitle":[{"text":"Digits","kind":"identifier"}],"role":"symbol","title":"Digits","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"url":"\/documentation\/parsing\/digits","abstract":[{"text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code","type":"text"},{"text":" ","type":"text"},{"text":"units.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Digits/init()-l9xc":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}]},"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Digits\/init()-l9xc","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">()"}],"title":"init()","url":"\/documentation\/parsing\/digits\/init()-l9xc","type":"topic","abstract":[],"kind":"symbol"}}}