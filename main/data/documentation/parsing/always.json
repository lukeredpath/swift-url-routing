{"metadata":{"role":"symbol","title":"Always","modules":[{"name":"Parsing"}],"symbolKind":"struct","navigatorTitle":[{"text":"Always","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:7Parsing6AlwaysV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"While not very useful on its own, the ","type":"text"},{"code":"Always","type":"codeVoice"},{"text":" parser can be helpful when combined with other","type":"text"},{"text":" ","type":"text"},{"text":"parsers or operators.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When its "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Void"},{"type":"text","text":", it can be used as a “no-op” parser of sorts and be plugged into"},{"type":"text","text":" "},{"type":"text","text":"other parser operations. For example, the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many"},{"type":"text","text":" parser can be configured with separator and"},{"type":"text","text":" "},{"type":"text","text":"terminator parsers:"}],"type":"paragraph"},{"syntax":"swift","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}],"type":"paragraph"},{"syntax":"swift","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"],"type":"codeListing"},{"inlineContent":[{"text":"To support this, ","type":"text"},{"type":"codeVoice","code":"Many"},{"text":" plugs ","type":"text"},{"type":"codeVoice","code":"Always<Input, Void>"},{"text":" into each omitted parser. As a simplified","type":"text"},{"text":" ","type":"text"},{"text":"example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}],"type":"paragraph"},{"syntax":"swift","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"],"type":"codeListing"},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" can be used as the last alternative of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"output, the resulting parser will be throwing. Instead, prefer "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns a non-throwing parser."}],"type":"paragraph"}]}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations"]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo"}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","abstract":[],"url":"\/documentation\/parsing","type":"topic","kind":"symbol","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/print(_:into:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Attempts to print a well-structured piece of data into something more nebulous.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)","url":"\/documentation\/parsing\/always\/print(_:into:)","kind":"symbol","title":"print(_:into:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"url":"\/documentation\/parsing\/oneof","type":"topic","title":"OneOf","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser/replaceError(with:)":{"kind":"symbol","title":"replaceError(with:)","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"title":"Always","url":"\/documentation\/parsing\/always","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"navigatorTitle":[{"text":"Always","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-2spg2":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","url":"\/documentation\/parsing\/always\/init(_:)-2spg2","kind":"symbol","title":"init(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/ParserPrinter-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","type":"topic","kind":"article","url":"\/documentation\/parsing\/always\/parserprinter-implementations","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/Parser-Implementations":{"title":"Parser Implementations","url":"\/documentation\/parsing\/always\/parser-implementations","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations","kind":"article","role":"collectionGroup","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Many":{"type":"topic","abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many","kind":"symbol","title":"Many","role":"symbol","url":"\/documentation\/parsing\/many","navigatorTitle":[{"text":"Many","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-fdjh":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh","url":"\/documentation\/parsing\/always\/init(_:)-fdjh","kind":"symbol","title":"init(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/output":{"role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"text":"Output","kind":"typeIdentifier"}],"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output","url":"\/documentation\/parsing\/always\/output","kind":"symbol","title":"output"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parserprinter","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/parse(_:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)","url":"\/documentation\/parsing\/always\/parse(_:)","kind":"symbol","title":"parse(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-56hez":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","url":"\/documentation\/parsing\/always\/init(_:)-56hez","kind":"symbol","title":"init(_:)"}}}