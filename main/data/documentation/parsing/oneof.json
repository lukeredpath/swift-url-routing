{"sections":[],"metadata":{"role":"symbol","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing5OneOfV","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","title":"OneOf","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)"],"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo"}],"variants":[{"paths":["\/documentation\/parsing\/oneof"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder"},{"type":"text","text":" result builder block."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},{"type":"text","text":" to parse an enum value. To do so, it spells out a list of"},{"type":"text","text":" "},{"type":"text","text":"parsers to "},{"code":"OneOf","type":"codeVoice"},{"type":"text","text":", one for each case:"}],"type":"paragraph"},{"code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}],"type":"paragraph"},{"code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","type":"reference","isActive":true},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}],"type":"paragraph"},{"code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"type":"codeListing","syntax":"swift"},{"text":"Specificity","anchor":"Specificity","level":2,"type":"heading"},{"inlineContent":[{"text":"The order of the parsers in the above ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},{"text":" does not matter because each of “€”, “£” and “$”","type":"text"},{"text":" ","type":"text"},{"text":"are mutually exclusive, i.e. at most one will succeed on any given input.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple"},{"type":"text","text":" "},{"type":"text","text":"can succeed on a given input) you must order them from most specific to least specific. That is,"},{"type":"text","text":" "},{"type":"text","text":"the first parser should succeed on the fewest number of inputs and the last parser should"},{"type":"text","text":" "},{"type":"text","text":"succeed on the most number of inputs."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of"},{"type":"text","text":" "},{"type":"text","text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they"},{"type":"text","text":" "},{"type":"text","text":"are quoted:"}],"type":"paragraph"},{"code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Here we have a list of last and first names separated by a comma, and some of the last names are","type":"text"},{"text":" ","type":"text"},{"text":"quoted because they contain commas.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only","type":"text"},{"text":" ","type":"text"},{"text":"if that fails we can parse a plain field that takes everything up until the next comma or","type":"text"},{"text":" ","type":"text"},{"text":"newline:","type":"text"}],"type":"paragraph"},{"code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}],"type":"paragraph"},{"code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Running this parser on the input shows that it properly isolates each field of the CSV, even","type":"text"},{"text":" ","type":"text"},{"text":"fields that are quoted and contain a comma:","type":"text"}],"type":"paragraph"},{"code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser does. For example:","type":"text"}],"type":"paragraph"},{"code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Whereas the "},{"code":"plainField","type":"codeVoice"},{"type":"text","text":" parser will happily succeed on anything the "},{"code":"quotedField","type":"codeVoice"},{"type":"text","text":" parser will"},{"type":"text","text":" "},{"type":"text","text":"succeed on:"}],"type":"paragraph"},{"code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For this reason the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser must be listed first so that it can try its logic"},{"type":"text","text":" "},{"type":"text","text":"first, which succeeds less frequently, before then trying the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"succeeds more often."}],"type":"paragraph"},{"text":"Backtracking","anchor":"Backtracking","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true},{"type":"text","text":" parser is the primary tool for introducing backtracking into your parsers,"},{"type":"text","text":" "},{"type":"text","text":"which means to undo the consumption of a parser when it fails. For more information, see the"},{"type":"text","text":" "},{"type":"text","text":"article "},{"type":"text","text":"doc:Backtracking"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"title":"Always","url":"\/documentation\/parsing\/always","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"navigatorTitle":[{"text":"Always","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parsers":{"title":"parsers","kind":"symbol","type":"topic","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers","url":"\/documentation\/parsing\/oneof\/parsers","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/replaceError(with:)":{"title":"replaceError(with:)","kind":"symbol","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOfBuilder":{"role":"symbol","title":"OneOfBuilder","type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOfBuilder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","url":"\/documentation\/parsing\/oneofbuilder","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"url":"\/documentation\/parsing\/oneof","type":"topic","title":"OneOf","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","url":"\/documentation\/parsing\/parserprinter","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Parsers"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","type":"topic","title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","kind":"article","abstract":[],"role":"collectionGroup"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","abstract":[],"url":"\/documentation\/parsing","type":"topic","kind":"symbol","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parse(_:)":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"url":"\/documentation\/parsing\/oneof\/parse(_:)","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)","role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/Parser-Implementations":{"type":"topic","url":"\/documentation\/parsing\/oneof\/parser-implementations","kind":"article","title":"Parser Implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/init(_:)":{"type":"topic","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/oneof\/init(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)","kind":"symbol","role":"symbol","abstract":[]}}}